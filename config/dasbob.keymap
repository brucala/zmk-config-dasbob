#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        minus_qmark: minus_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_QMARK";
            bindings = <&kp MINUS>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <300>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 34 35 5 15 25 26 16 6 7 8 9 16 17 18 19 26 27 28 29>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <300>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };

        hmr_minus_qmark: hmr_minus_qmark {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_MINUS_QMARK";
            bindings = <&kp>, <&minus_qmark>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <300>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
    };

    macros {
        repeat: repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2 &kp NUMBER_4 &kp NUMBER_2 &kp NUMBER_4 &kp NUMBER_2 &kp NUMBER_4>;
            label = "REPEAT";
        };

        snip: snip {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &kp LEFT_GUI &kp S>;
            label = "SNIP";
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp L>;
            label = "LOCK";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <9 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        Base {
            bindings = <
&kp W            &kp L            &kp Y         &kp P            &kp B        &kp Z      &kp F         &kp O                     &kp U            &kp SQT
&kp C            &kp R            &kp S         &kp T            &kp G        &kp M      &kp N         &kp E                     &kp I            &kp A
&hml LEFT_GUI Q  &hml LEFT_ALT J  &hml LSHFT V  &hml LCTRL D     &kp K        &kp X      &hmr RCTRL H  &hmr_minus_qmark RSHFT 0  &hmr RALT COMMA  &hmr RGUI DOT
                                  &smart_shift  &lt 1 BACKSPACE  &lt 3 ENTER  &lt 4 TAB  &lt 2 SPACE   &mt LCTRL UNDERSCORE
            >;
        };

        Nav {
            bindings = <
&trans              &trans        &kp K_BACK      &kp K_FORWARD  &trans         &kp PG_UP  &kp HOME       &kp UP          &kp END    &kp LA(LC(UP))
&mt LGUI LC(LS(Z))  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LCTRL      &trans         &kp PG_DN  &kp LEFT       &kp DOWN_ARROW  &kp RIGHT  &kp LA(LC(DOWN))
&kp LC(Z)           &kp LC(X)     &kp LC(C)       &kp LC(V)      &kp LA(LC(H))  &trans     &kp LC(PG_UP)  &kp LC(PG_DN)   &trans     &kp PRINTSCREEN
                                  &trans          &trans         &trans         &trans     &kp LC(SPACE)  &trans
            >;
        };

        Sym {
            bindings = <
&kp TILDE      &kp AT     &kp HASH      &kp DOLLAR       &kp PERCENT    &trans  &kp LBKT  &kp RBKT  &trans    &kp GRAVE
&kp EXCL       &kp PLUS   &kp MINUS     &kp EQUAL        &kp AMPERSAND  &trans  &kp LPAR  &kp RPAR  &kp LT    &kp GT
&kp BACKSLASH  &kp SLASH  &kp ASTERISK  &kp CARET        &kp PIPE       &trans  &kp LBRC  &kp RBRC  &kp SEMI  &kp COLON
                          &trans        &mt LC(DEL) DEL  &kp LS(ENTER)  &trans  &trans    &trans
            >;
        };

        Num {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4     &kp F5   &kp STAR       &kp N7  &kp N8     &kp N9  &kp FSLH
&kp F6   &kp F7   &kp F8  &kp F9     &kp F10  &kp PLUS       &kp N4  &kp N5     &kp N6  &kp MINUS
&kp F11  &kp F12  &trans  &kp SPACE  &trans   &kp EQUAL      &kp N1  &kp N2     &kp N3  &kp DOT
                  &trans  &trans     &trans   &kp BACKSPACE  &kp N0  &kp COMMA
            >;
        };

        sp {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans        &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
                            &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };
    };
};
